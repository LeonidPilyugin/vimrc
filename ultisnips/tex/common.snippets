global !p

def create_table(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]
	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
	rows = int_val(rows)
	cols = int_val(cols)
	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	snip.buffer[snip.line] = ''
	final_str = old_spacing + "\\begin{tabular}{|" + "|".join(['$' + str(i + 1) for i in range(cols)]) + "|}\n\\hline\n"
	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])
		final_str += " \\\\\\\\\hline\n"
	final_str += old_spacing + "\\end{tabular}\n$0"
	snip.expand_anon(final_str)

def add_row(snip):
	row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	snip.buffer[snip.line] = ''
	final_str = old_spacing
	final_str += " & ".join(['$' + str(j + 1) for j in range(row_len)])
	final_str += " \\\\\\\\\hline"
	snip.expand_anon(final_str)

endglobal

snippet beg "begin{} / end{}" bA
\begin{$1}
    $2
\end{$1}
$0
endsnippet

snippet tab "table" bA
\begin{table}[!ht]
    \centering
    \caption{$1}
    $2
\end{table}
$0
endsnippet

# gentbl 5x3<tab>
pre_expand "create_table(snip)"
snippet "gentbl (\d+)x(\d+)" "Generate table of *width* by *height*" r
endsnippet

# tr 3<tab>
# creates
#  &  &  \\
pre_expand "add_row(snip)"
snippet "tr (\d+)" "Add table row of dimension ..." r
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
    \item $1
\end{enumerate}
$0
endsnippet

snippet item "Itemize" bA
\begin{itemize}
    \item $1
\end{itemize}
$0
endsnippet

snippet sect "Section" bA
\section{$1}
$0
endsnippet

snippet ssect "Subsection" bA
\subsection{$1}
$0
endsnippet

snippet e10 "10**" i
\cdot 10^{$1}
$0
endsnippet
